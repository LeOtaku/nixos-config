#!/bin/sh

is_clean () {
	if git diff HEAD --quiet && git submodule --quiet foreach git diff HEAD --quiet; then
		return 0
	else
		return 1
	fi
}

show_status () {
	echo "Entering 'nixos-config'"
	git status --short
	git submodule foreach git status --short
}


fetch () {
	DIR=${f:-nixpkgs}
	SOURCE=${1:-"all"}
	[ $SOURCE = "all" ] && SOURCE="--all" || echo "Fetching $SOURCE"
	cd $DIR
	git fetch $SOURCE
}

diff () {
	CHECK1=$1
	CHECK2=$2
	[ -z "$CHECK2" ] && CHECK2=$CHECK1 && CHECK1="HEAD"
	cd nixpkgs
	if [ -n "$i" ]; then
		if git diff $CHECK1 $CHECK2 --quiet; then
			echo "No" 
		else
			echo "Yes"
		fi
	else
		[ -n "$f" ] && git diff $CHECK1 $CHECK2 -- $f && return
		[ -n "$c" ] && git diff $CHECK1 $CHECK2 && return
		git diff --name-only $CHECK1 $CHECK2
	fi
}

list_modules () {
	git submodule foreach git rev-parse HEAD | sed 's/Entering/Submodule/g'
}

update_modules () {
	list_modules
	list_modules > $MODULETRACKER
}

switch () {
	if is_clean; then
		REL_COMMIT=$1
		MODULE="${f:-nixpkgs}"
		cd $MODULE
		COMMIT=$(git rev-parse --short $REL_COMMIT)
		OLD_COMMIT=$(git rev-parse --short HEAD)
		MESSAGE="${MODULE}: ${OLD_COMMIT} -> ${COMMIT} (${HOST})"
		git checkout "$COMMIT" 
		echo "$MESSAGE"
		cd $CONFIGS
		list_modules > $MODULETRACKER
		git add $MODULETRACKER
		git commit -a -m "$MESSAGE"
	else
		echo "Your repo has uncommited changes, please fix that"
		show_status
		return 1
	fi
}

rebuild () {
	REBUILD_TYPE=$1
	if [ -n "$F" ]; then
		echo "Forcing rebuild"
		nixos-rebuild $REBUILD_TYPE
	elif is_clean; then
		nixos-rebuild $REBUILD_TYPE
	else
		show_status
		echo "Your repo has uncommited changes, please fix that"
		return 1
	fi
}

COMMAND=$1
CONFIGS=${NIX_HELP_CONFIG_DIR:-$NIXOS_CONFIG_DIR}
HOST=${NIX_SYSTEM_NAME}
MODULETRACKER=".moduletracker-$HOST"

OPTIND=2
while getopts sicf:F OPT; do
	read "$OPT" <<< "${OPTARG:-true}"
done

INDENT=$OPTIND
shift $[ INDENT - 1 ]

cd $CONFIGS
case $COMMAND in
	fetch|update)
		fetch "$@"
		;;
	diff)
		diff "$@"
		;;
	checkout)
		COMMIT=$1
		cd nixpkgs
		git checkout $COMMIT
		;;
	switch)
		switch "$@"
		;;
	rebuild)
		rebuild "$@"
		;;
	status)
		show_status "$@"
		;;
	list-modules|modules)
		list_modules "$@"
		;;
	update-modules|upmo)
		update_modules "$@"
		;;
	get-store|show-store|store)
		echo $(dirname $(dirname $(readlink $(which $1))))
		;;
	get-rev|show-rev|rev)
		cd "$f"
		if [ -n "$s" ]; then
			git rev-parse --short HEAD
		else
			git rev-parse HEAD
		fi
		;;
	**)
		echo "Please specify a valid command"
esac
